{"version":3,"file":"simple-table-lib.js","sources":["../../../../simple-table-lib/src/lib/simple-table-lib.component.ts","../../../../simple-table-lib/src/lib/simple-table-lib.module.ts","../../../../simple-table-lib/src/projects.ts","../../../../simple-table-lib/src/simple-table-lib.ts"],"sourcesContent":["import {OnChanges} from '@angular/core';\nimport {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'demo-simple-table',\n  template: `\n    <table [ngClass]=\"tableClass\">\n      <thead>\n      <tr>\n        <th *ngFor=\"let prop of columnProps\"\n            [ngClass]=\"headerCellClass\">\n          {{ prop.caption }}\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr\n        *ngFor=\"let item of dataSource; index as index\"\n        [ngClass]=\"rowClass\"\n      >\n        <td *ngFor=\"let prop of columnProps\"\n            [ngClass]=\"cellClass\">\n          {{\n          showRowNumber && prop.dataField === '#'\n            ? index + 1\n            : item[prop.dataField]\n          }}\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  `\n})\nexport class SimpleTableLibComponent implements OnChanges{\n  /**\n   * Data source reference\n   */\n  @Input()\n  dataSource: Array<any> = [];\n\n  /**\n   * Apply css class to the table.\n   */\n  @Input()\n  tableClass = '';\n\n  /**\n   * Apply css class to the th cell.\n   */\n  @Input()\n  headerCellClass = '';\n\n  /***\n   * Apply css class to the td cell.\n   */\n  @Input()\n  cellClass = '';\n\n  /**\n   * Apply css class to the table body row.\n   */\n  @Input()\n  rowClass = '';\n\n  /**\n   * Whether to show row number\n   */\n  @Input()\n  showRowNumber: boolean;\n\n  columnProps: Array<{ dataField: string; caption: string }>;\n\n  /**\n   * Dynamic column props.\n   * `dataField` is used to map value from the object.\n   * `caption` is used as table header label.\n   */\n  @Input()\n  columnConfig: Array<{ dataField: string; caption: string }>;\n\n  ngOnChanges(): void {\n    if (!this.columnConfig) return;\n    // don't just mutate the origin, make a new copy of it and use locally.\n    const copy = this.columnConfig.map((c) => ({...c}));\n    this.columnProps = this.showRowNumber\n      ? [{caption: '#', dataField: '#'}, ...copy]\n      : copy;\n  }\n\n  // TODO: maybe more feature to implement for table interaction, such as row clicked etc.,\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleTableLibComponent } from './simple-table-lib.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [SimpleTableLibComponent],\n  imports: [CommonModule],\n  exports: [SimpleTableLibComponent]\n})\nexport class SimpleTableLibModule {}\n","/*\n * Public API Surface of simple-table-lib\n */\n\nexport * from './lib/simple-table-lib.component';\nexport * from './lib/simple-table-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './projects';\n"],"names":[],"mappings":";;;;;MAiCa,uBAAuB;IA9BpC;;;;QAmCE,eAAU,GAAe,EAAE,CAAC;;;;QAM5B,eAAU,GAAG,EAAE,CAAC;;;;QAMhB,oBAAe,GAAG,EAAE,CAAC;;;;QAMrB,cAAS,GAAG,EAAE,CAAC;;;;QAMf,aAAQ,GAAG,EAAE,CAAC;KA4Bf;IAVC,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,YAAY;YAAE,OAAO;;QAE/B,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,wBAAU,CAAC,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa;cACjC,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,EAAE,GAAG,IAAI,CAAC;cACzC,IAAI,CAAC;KACV;;oHAtDU,uBAAuB;wGAAvB,uBAAuB,8RA5BxB;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BT;2FAEU,uBAAuB;kBA9BnC,SAAS;mBAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BT;iBACF;8BAMC,UAAU;sBADT,KAAK;gBAON,UAAU;sBADT,KAAK;gBAON,eAAe;sBADd,KAAK;gBAON,SAAS;sBADR,KAAK;gBAON,QAAQ;sBADP,KAAK;gBAON,aAAa;sBADZ,KAAK;gBAWN,YAAY;sBADX,KAAK;;;MCpEK,oBAAoB;;iHAApB,oBAAoB;kHAApB,oBAAoB,iBAJhB,uBAAuB,aAC5B,YAAY,aACZ,uBAAuB;kHAEtB,oBAAoB,YAHtB,CAAC,YAAY,CAAC;2FAGZ,oBAAoB;kBALhC,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,uBAAuB,CAAC;oBACvC,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,OAAO,EAAE,CAAC,uBAAuB,CAAC;iBACnC;;;ACRD;;;;ACAA;;;;;;"}